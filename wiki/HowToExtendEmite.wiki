#labels Featured,Phase-Implementation

Extend emite its an easy task. You can use the emite object to subscribe, publish events or send stanzas.
A simple Echo componente would be like this:
{{{
public class Echo implements Installable {

  private final Emite emite;

  public Echo(final Emite emite) {
    this.emite = emite;
  }

  public void install() {
    emite.subscribe(Matchers.when("message"), new PacketListener() {
      public void handle(final IPacket received) {
        echo(new Message(received));
      }
    });
  }

  private void echo(final Message message) {
    // exchange the from and to...
    final Message response = new Message(message.getToURI(), message.getFromURI(), message.getBody());
    emite.send(response);
  }
}
}}}

We should pack several related components in a module: just a class with a couple of static methods:
{{{
public class EchoModule {

  private static final String COMPONENT_ECHO = "echo:echo";

  public static Echo getEcho(final Container container) {
    return (Echo) container.get(COMPONENT_ECHO);
  }

  public static void install(final Container container) {
    final Emite emite = CoreModule.getEmite(container);
    final Echo echo = new Echo(emite);
    container.install(COMPONENT_ECHO, echo);
  }
}
}}}

And we can use like this:
{{{
final Xmpp xmpp = Xmpp.create(new BoshOptions("/http-base"));
EchoModule.install(xmpp);
{{{

Emite is also very easy to test:
public class EchoTest {
  @Test
  public void shouldAnswer() {
    final EmiteTestHelper emite = new EmiteTestHelper();
    emite.install(new Echo(emite));
    emite.receives("<message from='contact@domain' to='me@domain'><body>Hello!</body></message>");
    emite.verifySent("<message from='me@domain' to='contact@domain'><body>Hello!</body></message>");
  }
}
