#labels Featured,Phase-Implementation
A plugin (in emite) its a collection of objects (called components) registered into a container, usually subscribed to a message in the dispatcher *and* a object (that implements the Plugin interface) who has the responsability of create the components and subscribe them  into the dispatcher.

So we will write a a simple plugin that, when a xmpp message arrives it answer the same. First we have the Echo object

{{{
class Echo {
 public Message answerTo(Message incoming) {
  Message answer = new Message(incoming.getBody());
  answer.setTo(incoming.getFrom());
  answer.setFrom(incoming.getTo());
  return answer;
 }
}
}}}

Some objects can have some methods always starting with uppercase (to recognise them) that acts as syntatic sugar and can make the coding more descriptive:

{{{
class Echo {
 public Message answerTo(Message incoming) {
  return new Message(incoming.getBody().To(incoming.getFrom()).From(incoming.getTo());
 }
}
}}}

Then we need the EchoPlugin that installs the components and subscribe it into the dispatcher. We will subclass the SenderPlugin that provides also some sugar to the process:

{{{
class EchoPlugin extends SenderPlugin {
 private final Echo echo;

 public EchoPlugin(Bosh bosh) {
  super(bosh);
  this.echo = new Echo();
 }

 public void install() {
  register("echo", this.echo);
 }

 public void attach() {
  when.Message().Send(new DefferredResponse() {
    public Packet handle(Packet packet) {
      return echo.answerTo(new Message(packet));
    }
  }
 }
}
}}}

a couple of tricks:
  * the SenderPlugin depends on the bosh component (because is capable to send!)
  * we use the inherit where object (a kind of dsl object) to subscribe the dispatcher in a declarative way 
  * we create a anonymous object implementing the DeferredResponse interface as a subscriptor
  * the wrap the incomming packet with a Message class. Any packet can be wrapped to a Message, a IQ or Presence stanza types (but you have to be sure of what you're doing!)

(i normally use a more concise way where the Echo class have the DeferredResponse as the attribute so i can write:
{{{
when.Message().Send(echo.answerToMessage);
}}}
in the attach method)

