#summary How to get the ui running and create a new app with emite
#labels Featured


Emite its a pure gwt library, so no server code is involved.
You may ask yourself "[FAQ why do you I need to install a proxy?]"



== Prerequisites ==

You need a running xmpp server with Http Binding connection enabled. See our [http://code.google.com/p/emite/wiki/ServerAndClientsCompatibility Server and Client Compatibility Matrix]


== Environment setup ==

  # install maven2 version 2.0.7 or over (http://maven.apache.org)
  # download GWT *version 1.5*. Currently, *only works with Milestone1* due a gwt-ext issue
  # create or modify the maven {{{~/.m2/settings.xml}}} file to use the 1.5M1 distribution of gwt (see Appendix1)
  # configure your server Http Binding Service to listen at {{{http://localhost:8383/http-bind/}}} or tweak the web.xml file of emite to change this values

== Run the example from the sources ==

  # check out the code: {{{svn checkout http://emite.googlecode.com/svn/trunk/ emite}}}
  # inside the emite directory type {{{mvn gwt:gwt}}} to run emite using the GWTShell ...
  # ... or type {{{./script/server.sh}}} to compile the sources to javascript, and start a jetty server with a proxy installed, and run the example looking at:

== Create a project to use emite ==

There are other ways, but the fastest is to use maven2:

  # create a new maven project: {{{mvn archetype:create -DgroupId=com.mycompany.app -DartifactId=my-webapp -DarchetypeArtifactId=maven-archetype-webapp}}}
  # Add this to the resulting pom.xml:
{{{
<?xml version="1.0" encoding="UTF-8"?>
<project>
 ...

  <dependencies>
    <dependency>
      <groupId>com.calclab</groupId>
      <artifactId>emite</artifactId>
      <version>0.2.0</version>
    </dependency>
  </dependencies>
</project>
}}}

See Appendix C for more pom.xml configuration options. You can also take a look to http://emite.googlecode.com/svn/trunk/blackboard/ for an example of an application that uses Emite library.

  # Create a new gwt project with the current gwt module dependencies:
{{{
<!-- library: required -->
<inherits name="com.calclab.emite.Emite" />
<!-- if you want to include the emite ui in your application -->
<inherits name="com.calclab.emiteuiplugin.EmiteUIPlugin" />
<!-- to make GWTShell use the java proxy -->
<servlet path="/proxy" class="de.spieleck.servlets.ProxyServlet"/>
}}}

Also, if you want *to use the ui you have to configure the connection settings in your app's html file*. Take a look at http://emite.googlecode.com/svn/trunk/emite/src/main/java/com/calclab/emiteui/public/EmiteUI.html to see an example.


== Appendix A: Configuration of maven ==

Example of maven .m2/settings.xml to work with gwt-maven plugin:

{{{
<?xml version="1.0" encoding="UTF-8"?>
 <settings>
   <profiles>
     <profile>
       <id>gwt-1.4.61</id>
       <properties>
         <google.webtoolkit.home>/usr/local/lib/gwt/gwt-linux-1.4.61</google.webtoolkit.home>
         <!-- <google.webtoolkit.devjar>gwt-dev-linux</google.webtoolkit.devjar> -->
         <!-- you only need this is you are on a mac -->
        <google.webtoolkit.extrajvmargs>-Xmx256M</google.webtoolkit.extrajvmargs>
      </properties>
     </profile>
     <profile>
       <id>gwt-0.0.2030</id>
       <properties>
         <google.webtoolkit.home>/usr/local/lib/gwt/gwt-linux-0.0.2030</google.webtoolkit.home>
         <!-- <google.webtoolkit.devjar>gwt-dev-linux</google.webtoolkit.devjar> -->
         <!-- you only need this is you are on a mac -->
        <google.webtoolkit.extrajvmargs>-Xmx256M</google.webtoolkit.extrajvmargs>
      </properties>
     </profile>
   </profiles>
   <activeProfiles>
     <activeProfile>gwt-0.0.2030</activeProfile>
   </activeProfiles>
</settings>
}}}

== Appendix B: jar and war generation ==

To generate a jar from the sources type {{{mvn package}}} , or {{{mvn install}}} to install it in your current maven repository.

If you're planning to install it in your own web server, you can generate a war with: {{{mvn compile war:war}}}

== Appendix C: more pom.xml options ==

We usually use [http://code.google.com/p/gwt-maven/ gwt-maven] plugin to compile and run the gwt applications, and jetty to run the proxies. You can configure them adding this lines to pom.xml
{{{

<?xml version="1.0" encoding="UTF-8"?>
<project>
  ...
  <build>
    <plugins>
      <plugin>
        <artifactId>maven-compiler-plugin</artifactId>
        <configuration>
          <source>1.5</source>
          <target>1.5</target>
        </configuration>
      </plugin>
      <plugin>
        <groupId>com.totsp.gwt</groupId>
        <artifactId>maven-googlewebtoolkit2-plugin</artifactId>
        <version>2.0-beta14</version>
        <configuration>
          <style>OBF</style>
          <runTarget>
       <!-- [[ YOUR APP HTML FILE HERE ]] -->
          </runTarget>
          <compileTarget>
            <param></param>
          </compileTarget>
          <compileTargets>
            <compileTarget>
        <!-- [[ YOUR APP MODULE NAME HERE ]] -->
            </compileTarget>
          </compileTargets>
          <generatorRootClasses></generatorRootClasses>
          <generatorDestinationPackage>
       <!-- [[ YOUR APP MODULE NAME HERE ]] -->
          </generatorDestinationPackage>
          <generateGettersAndSetters>
            false
          </generateGettersAndSetters>
          <generatePropertyChangeSupport>
            false
          </generatePropertyChangeSupport>
        </configuration>
        <executions>
          <execution>
            <goals>
              <!-- <goal>mergewebxml</goal> -->
              <!-- <goal>compile</goal> -->
            </goals>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.mortbay.jetty</groupId>
        <artifactId>maven-jetty-plugin</artifactId>
        <version>6.1.5</version>
        <configuration>
          <contextPath>/</contextPath>
          <scanIntervalSeconds>0</scanIntervalSeconds>
          <connectors>
            <connector
              implementation="org.mortbay.jetty.nio.SelectChannelConnector">
              <port>4444</port>
              <maxIdleTime>60000</maxIdleTime>
            </connector>
          </connectors>
        </configuration>
      </plugin>
    </plugins>
  </build>

</project>


}}}}
