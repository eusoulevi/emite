#summary How to get the example running
#labels Featured



= Introduction =

Bundled with the library there is a gwt ui example. This is the guide to get the example running.

== Server proxy: why? ==

Emite its a pure xmpp library. That means that there is no need of server processing to acomplish the tasks... but we need install a server... The reason is because as a security feature, you cannot call pages on 3rd-party domains using the browser HttpRequest object (this may change in the near future: http://ejohn.org/blog/cross-site-xmlhttprequest/)

So we need to install a proxy that redirect all the local HttpRequest coming from the client to the real Xmpp Server.

Two java implementation of this proxy are included for testing purposes in the emite library, but in production envirorments we usually delegate this task in the real server (i.e. Apache2)

The first implementation is a real proxy and installed in the /proxy url and the second implementation is a bosh servlet (to connecto to a non bosh-jabber-servers) and its instaled at /http-bosh (see web.xml for more details)

== Pre-requsites ==

You need a running xmpp server with bosh manager (or you can use the bosh servlet with the jabber server you want). By default we use: localhost:8383/http-bind (but you can change it easily in the web.xml configuration file). 
OpenFire is the easiest way to get this, but any other xmpp server with bosh support can handle (i.e. Tigase server)

  # install maven2 ( http://maven.apache.org/ )
  # Install GWT *version 1.5*. It doesn't work with earlier versions (we are currently using 1.5 Milestone 1)
  # Create or configure .m2/settings.xml file to use the 1.5 distribution of gwt (see Appendix 1)

== Compile the gwt:sources ==

Inside the project folder type:
{{{
mvn gwt:compile
}}}
to compile the sources


== Run the servlet proxy ==

if you use a linux envirorment, write:
{{{
./script/server.sh
}}}
to copy the compiled js to the destination folder and run the proxy servlet.
If you are not unix', take a look to the script to know which are
the folders you have to copy and then:
{{{
mvn jetty:run
}}}
to run the proxy

== Run the examples ==

Point the browser to:
http://localhost:4444/gwt/com.calclab.emiteui.EmiteUI/EmiteUI.html
to see the full featured emite-ui
or point to browser to:
http://localhost:4444/gwt/com.calclab.emite.examples.chat.Chat/Chat.html
to see the chat example

== Appendix A: Configuration of maven ==

Example of maven .m2/settings.xml to work with gwt-maven plugin:

{{{
<?xml version="1.0" encoding="UTF-8"?>
 <settings>
   <profiles>
     <profile>
       <id>gwt-1.4.61</id>
       <properties>
         <google.webtoolkit.home>/usr/local/lib/gwt/gwt-linux-1.4.61</google.webtoolkit.home>
         <!-- <google.webtoolkit.devjar>gwt-dev-linux</google.webtoolkit.devjar> -->
         <!-- you only need this is you are on a mac -->
        <google.webtoolkit.extrajvmargs>-Xmx256M</google.webtoolkit.extrajvmargs>
      </properties>
     </profile>
     <profile>
       <id>gwt-0.0.2030</id>
       <properties>
         <google.webtoolkit.home>/usr/local/lib/gwt/gwt-linux-0.0.2030</google.webtoolkit.home>
         <!-- <google.webtoolkit.devjar>gwt-dev-linux</google.webtoolkit.devjar> -->
         <!-- you only need this is you are on a mac -->
        <google.webtoolkit.extrajvmargs>-Xmx256M</google.webtoolkit.extrajvmargs>
      </properties>
     </profile>
   </profiles>
   <activeProfiles>
     <activeProfile>gwt-0.0.2030</activeProfile>
   </activeProfiles>
</settings>
}}}

== Appendix B: jar generation ==

  mvn package

or without tests:

  mvn package -Dmaven.test.skip=true

== Appendix C: war generation ==

  mvn compile war:war

== Appendix D: inclusion in your gwt application ==

Add to your pom.xml (or include the jars)

In your .gwt.xml include:

  <inherits name="com.calclab.emite.Emite" />

and if you use the emiteuiplugin:

  <inherits name="com.calclab.emiteuiplugin.EmiteUIPlugin" />

